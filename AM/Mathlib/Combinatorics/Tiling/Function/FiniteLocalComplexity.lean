/-
Copyright (c) 2024 Joseph Myers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Myers
-/
import AM.Mathlib.Combinatorics.Tiling.Function.Basic
import AM.Mathlib.Combinatorics.Tiling.Patch
import AM.Mathlib.Combinatorics.Tiling.TileSetCard
import Mathlib.Algebra.Group.Subgroup.Actions

/-!
# Finite local complexity

This file defines finite local complexity properties for families of tiles in a discrete context.

## Main definitions

* `t.FiniteLocalComplexityOn H s`: A `VarTileSetFunction` for whether there are only
finitely many pairs of an element of `s` (a set of points) and the patch from `t` generated by
that element, up to the symmetries in `H`.

* `t.FiniteLocalComplexity H`: A `TileSetFunction` for whether there are only finitely
many pairs of a point and the patch from `t` generated by that point, up to the symmetries in `H`.

## References

* Branko Grünbaum and G. C. Shephard, Tilings and Patterns, 1987

* D. Frettlöh, F. Gähler, E. Harriss,
  [Tilings encyclopedia: FLC](https://tilings.math.uni-bielefeld.de/glossary/flc/)
-/


noncomputable section

namespace Discrete

open Function
open scoped Pointwise

variable {G X ιₚ : Type*} [Group G] [MulAction G X]
variable {ps : Protoset G X ιₚ} {ιₜ ιₜ' : Type*}

namespace TileSet

/-- Whether there are only finitely many pairs of an element of `s` and the patch from `t`
generated by that element, up to the symmetries in `H`. -/
def FiniteLocalComplexityOn (H : Subgroup G) : VarTileSetFunction (Set (Set X)) ps Prop H :=
  ⟨fun {ιₜ : Type*} (s : Set (Set X)) (t : TileSet ps ιₜ) ↦
    ((fun x ↦ Quotient.mk (MulAction.orbitRel H (Set X × TileSetCard ps))
      (x, (t.patch x).card)) '' s).Finite,
   by simp,
   by
     rintro ιₜ g x t hg
     dsimp only [← Set.image_smul]
     convert rfl using 2
     simp only [Set.image_image]
     refine Set.image_congr ?_
     rintro s -
     rw [Quotient.eq, MulAction.orbitRel_apply, MulAction.mem_orbit_symm]
     exact ⟨⟨g, hg⟩, by simp⟩⟩

lemma finiteLocalComplexityOn_iff {H : Subgroup G} {s : Set (Set X)} {t : TileSet ps ιₜ} :
    t.FiniteLocalComplexityOn H s ↔
      ((fun x ↦ Quotient.mk (MulAction.orbitRel H (Set X × TileSetCard ps))
        (x, (t.patch x).card)) '' s).Finite :=
  Iff.rfl

/-- Whether there are only finitely many pairs of a point and the patch from `t` generated by
that point, up to the symmetries in `H`. -/
def FiniteLocalComplexity (H : Subgroup G) : TileSetFunction ps Prop H :=
  ((FiniteLocalComplexityOn H).toTileSetFunction (Set.range Singleton.singleton)).ofLE (by
    refine Eq.le ?_
    convert (inf_top_eq H).symm
    ext g
    simp only [MulAction.mem_stabilizer_iff, Subgroup.mem_top, iff_true, Set.smul_set_range]
    ext s
    simp only [Set.smul_set_singleton, Set.mem_range]
    refine ⟨?_, ?_⟩ <;> rintro ⟨x, rfl⟩
    · exact ⟨g • x, rfl⟩
    · exact ⟨g⁻¹ • x, by simp⟩)

lemma finiteLocalComplexity_iff {H : Subgroup G} {t : TileSet ps ιₜ} :
    t.FiniteLocalComplexity H ↔
      ((fun x ↦ Quotient.mk (MulAction.orbitRel H (Set X × TileSetCard ps))
        (x, (t.patch x).card)) '' (Set.range Singleton.singleton)).Finite :=
  Iff.rfl

end TileSet

end Discrete
